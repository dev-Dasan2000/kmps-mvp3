generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model patients {
  patient_id           String    @id
  hospital_patient_id  String?
  password             String
  name                 String
  profile_picture      String?
  email                String    @unique
  phone_number         String?
  address              String?
  nic                  String?   @unique
  blood_group          String?
  date_of_birth        String?
  gender               String?

  emergency_contact    emergency_contacts?
  insurance_detail     insurance_details?
  medical_reports      medical_reports[]
  medical_histories    medical_history[]
  security_answers     patient_security_question_answers[]
  appointments         appointments[]
  soap_notes           soap_notes[]
  studies              study[]
  orders               orders[]
  consent_forms        consent_form[]
}

model emergency_contacts {
  emergency_contact_id Int      @id @default(autoincrement())
  name                 String
  relationship         String?
  contact_number       String
  patient_id           String   @unique
  patient              patients @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
}

model dentists {
  dentist_id           String    @id
  password             String
  name                 String
  profile_picture      String?
  email                String    @unique
  phone_number         String?
  language             String?
  service_types        String?
  work_days_from       String?
  work_days_to         String?
  work_time_from       String?
  work_time_to         String?
  appointment_duration String?
  appointment_fee      Decimal?  @db.Decimal

  appointments         appointments[]
  soap_notes           soap_notes[]
  blocked_dates        blocked_dates[]
  security_answers     dentist_security_question_answers[]
  dentistAssigns      DentistAssign[]
  room_assigns         room_assign[]
  orders                orders[]
  consent_forms        consent_form[]
}

model appointments {
  appointment_id Int      @id @default(autoincrement())
  patient_id     String?
  dentist_id     String?
  date           DateTime
  time_from      String
  time_to        String
  fee            Decimal? @db.Decimal
  note           String?
  status         String?
  payment_status String?
  cancel_note    String? 

  patient         patients? @relation(fields: [patient_id], references: [patient_id], onDelete: SetNull)
  dentist         dentists? @relation(fields: [dentist_id], references: [dentist_id], onDelete: SetNull)
  payment_history payment_history?
}

model payment_history {
  appointment_id   Int          @id
  payment_date     String?
  payment_time     String?
  reference_number String?

  appointment      appointments @relation(fields: [appointment_id], references: [appointment_id])
}

model soap_notes {
  note_id     Int      @id @default(autoincrement())
  dentist_id  String?
  patient_id  String
  note        String
  date        String

  dentist     dentists? @relation(fields: [dentist_id], references: [dentist_id], onDelete: SetNull)
  patient     patients  @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
}

model blocked_dates {
  blocked_date_id Int      @id @default(autoincrement())
  dentist_id      String
  date            String
  time_from       String?
  time_to         String?

  dentist         dentists @relation(fields: [dentist_id], references: [dentist_id], onDelete: Cascade)
}

model medical_reports {
  report_id   Int      @id @default(autoincrement())
  patient_id  String
  record_url  String
  record_name String

  patient     patients @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
}

model medical_questions {
  medical_question_id Int      @id @default(autoincrement())
  question            String
  medical_histories   medical_history[]
}

model medical_history {
  patient_id             String
  medical_question_id    Int
  medical_question_answer String?

  patient                patients          @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
  question               medical_questions @relation(fields: [medical_question_id], references: [medical_question_id])

  @@id([patient_id, medical_question_id])
}

model email_verifications {
  email String @id
  code  String
}

model security_questions {
  security_question_id Int      @id @default(autoincrement())
  question             String
  patient_answers      patient_security_question_answers[]
  dentist_answers      dentist_security_question_answers[]
  receptionist_answers receptionist_security_question_answers[]
  radiologist_answers  radiologist_security_question_answers[]
}

model patient_security_question_answers {
  patient_id            String
  security_question_id  Int
  answer                String

  patient               patients          @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
  question              security_questions @relation(fields: [security_question_id], references: [security_question_id])

  @@id([patient_id, security_question_id])
}

model dentist_security_question_answers {
  dentist_id            String
  security_question_id  Int
  answer                String

  dentist               dentists          @relation(fields: [dentist_id], references: [dentist_id], onDelete: Cascade)
  question              security_questions @relation(fields: [security_question_id], references: [security_question_id])

  @@id([dentist_id, security_question_id])
}

model receptionists {
  receptionist_id String @id
  password        String
  name            String
  email           String @unique
  phone_number    String?
  security_answers receptionist_security_question_answers[]
}

model receptionist_security_question_answers {
  receptionist_id       String
  security_question_id  Int
  answer                String

  receptionist          receptionists     @relation(fields: [receptionist_id], references: [receptionist_id], onDelete: Cascade)
  question              security_questions @relation(fields: [security_question_id], references: [security_question_id])

  @@id([receptionist_id, security_question_id])
}

model radiologists {
  radiologist_id String @id
  password       String
  name           String
  profile_picture String?
  email          String @unique
  phone_number   String?
  security_answers radiologist_security_question_answers[]
  studies        study[]
}

model radiologist_security_question_answers {
  radiologist_id        String
  security_question_id  Int
  answer                String

  radiologist           radiologists      @relation(fields: [radiologist_id], references: [radiologist_id], onDelete: Cascade)
  question              security_questions @relation(fields: [security_question_id], references: [security_question_id])

  @@id([radiologist_id, security_question_id])
}

model insurance_details {
  patient_id    String @id
  provider_name String?
  policy_number String?

  patient       patients @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
}

model reports {
  report_id       Int      @id @default(autoincrement())
  status          String
  report_file_url String?
  studies         study[]
}

model study {
  study_id         Int       @id @default(autoincrement())
  patient_id       String
  radiologist_id   String?
  date             DateTime
  time             String
  modality         String?
  report_id        Int?
  assertion_number Int?
  description      String?
  source           String?
  isurgent         Boolean   @default(false)
  dicom_file_url   String?
  body_part        String?
  reason           String?
  status           String?

  patient          patients   @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
  radiologist      radiologists? @relation(fields: [radiologist_id], references: [radiologist_id], onDelete: SetNull)
  report           reports?   @relation(fields: [report_id], references: [report_id], onDelete: SetNull)
  dentistAssigns  DentistAssign[]
}

model DentistAssign {
  study_id   Int
  dentist_id String

  study      study    @relation(fields: [study_id], references: [study_id], onDelete: Cascade)
  dentist    dentists @relation(fields: [dentist_id], references: [dentist_id], onDelete: Cascade)

  @@id([study_id, dentist_id])
  @@map("dentistassign")
}

model service_types {
  service_type_id Int    @id @default(autoincrement())
  service_type    String
}

model admins {
  admin_id String @id
  password String
}

model rooms {
  room_id     String @id
  description String?
  room_assigns room_assign[]
}

model room_assign {
  room_id   String
  dentist_id String
  date      DateTime
  time_to      String
  time_from    String

  rooms      rooms @relation(fields: [room_id], references: [room_id])
  dentists   dentists @relation(fields: [dentist_id], references: [dentist_id])

  @@id([room_id, dentist_id, date, time_to, time_from])
}

model lab {
  lab_id         String   @id
  name           String?
  password       String?
  contact_person String?
  contact_number String?
  email          String?
  address        String?
  specialties    String?

  orders         orders[]
}

model work_types {
  work_type_id Int     @id @default(autoincrement())
  work_type    String?

  orders       orders[]
}

model shades {
  shade_type_id Int     @id @default(autoincrement())
  shade         String?

  orders        orders[]
}

model material_types {
  material_id Int     @id @default(autoincrement())
  material    String?

  orders      orders[]
}

model orders {
  order_id             Int              @id @default(autoincrement())
  patient_id           String?
  dentist_id           String
  lab_id               String?
  work_type_id         Int?
  due_date             DateTime?
  file_types           String?
  shade_type_id        Int?
  material_id          Int?
  priority             String?
  special_instructions String?
  status               String?

  lab           lab?            @relation(fields: [lab_id], references: [lab_id])
  work_type     work_types?     @relation(fields: [work_type_id], references: [work_type_id])
  shade_type    shades?         @relation(fields: [shade_type_id], references: [shade_type_id])
  material_type material_types? @relation(fields: [material_id], references: [material_id])
  patient       patients?       @relation(fields: [patient_id], references: [patient_id])
  dentist       dentists        @relation(fields: [dentist_id], references: [dentist_id])

  order_files   order_files[]
  stage_assign stage_assign[]
}

model order_files {
  file_id  Int     @id @default(autoincrement())
  url      String?
  order_id Int?

  order orders? @relation(fields: [order_id], references: [order_id])
}

model stages {
  stage_id     Int             @id @default(autoincrement())
  name         String

  stage_assign stage_assign[]
}

model stage_assign {
  stage_assign_id  Int          @id @default(autoincrement())
  stage_id  Int
  order_id  Int
  completed Boolean   @default(false)
  date      DateTime

  // Foreign key relations
  stage     stages     @relation(fields: [stage_id], references: [stage_id])
  order     orders     @relation(fields: [order_id], references: [order_id])
}

model employees {
  eid              Int      @id @default(autoincrement())
  name             String
  dob              String
  gender           String
  email            String   @unique
  phone            String
  address          String?
  city             String?
  state            String?
  province         String?
  zip_code         String?
  job_title        String?
  employment_status String
  salary           Float?

  bank_info        bank_info[]
  emergency_contact emergency_contact[]
  attendance        employee_atd[]
  leaves            leaves[]
  payroll           payroll[]
  shifts            shifts[]

  @@map("employees")
}

model bank_info {
  eid              Int
  account_holder   String
  account_no       String   @unique
  bank_name        String
  branch           String?
  account_type     String?

  employee         employees @relation(fields: [eid], references: [eid], onDelete: Cascade)

  @@id([eid, account_no])
  @@map("bank_info")
}

model emergency_contact {
  eid              Int
  name             String
  relationship     String
  phone            String
  email            String?

  employee         employees @relation(fields: [eid], references: [eid], onDelete: Cascade)

  @@id([eid, phone])
  @@map("emergency_contact")
}

model employee_atd {
  eid              Int
  clock_in         DateTime
  clock_out        DateTime?

  employee         employees @relation(fields: [eid], references: [eid], onDelete: Cascade)

  @@id([eid, clock_in])
  @@map("employee_atd")
}

model leaves {
  eid              Int
  from_date        DateTime
  to_date          DateTime
  type             String
  status           String

  employee         employees @relation(fields: [eid], references: [eid], onDelete: Cascade)

  @@id([eid, from_date, to_date])
  @@map("leaves")
}

model consent_form {
  form_id            Int      @id @default(autoincrement())
  patient_id         String
  dentist_id         String
  procedure_details  String?
  explanation_given  String?
  sign               String?
  status             String?
  created_date       String?
  signed_date        String?

  patient            patients @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
  dentist            dentists @relation(fields: [dentist_id], references: [dentist_id], onDelete: Cascade)
}

model payroll {
  payroll_id Int      @id @default(autoincrement())
  eid        Int
  net_salary Float
  epf        Boolean
  etf        Boolean
  status     String

  employee   employees @relation(fields: [eid], references: [eid], onDelete: Cascade)

  @@map("payroll")
}

model shifts {
  shift_id  Int       @id @default(autoincrement())
  eid       Int
  from_time DateTime
  to_time   DateTime

  employee  employees @relation(fields: [eid], references: [eid], onDelete: Cascade)

  @@map("shifts")
}